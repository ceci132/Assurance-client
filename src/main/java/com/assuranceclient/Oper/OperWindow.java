/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.assuranceclient.Oper;

import com.assuranceclient.Settings.TarifiWindow;
import com.assuranceclient.Settings.VehicleWindow;
import com.assuranceclient.customers.CustomersWindow;
import com.assuranceclient.dto.Customer;
import com.assuranceclient.dto.SADoc;
import com.assuranceclient.dto.Tarifa;
import com.assuranceclient.dto.Vehicle;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Цветан Иванов
 */
public class OperWindow extends javax.swing.JInternalFrame {

    private int oldDoc_ids = 0;
    private String token = "";
    private String jsonStringDocuments = "";
    private String jsonStringCustomers = "";
    private String jsonStringTarifas = "";
    private String jsonStringVehicles = "";
    private ArrayList<Customer> dataCustomers = new ArrayList();
    private ArrayList<Tarifa> dataTarifa = new ArrayList();
    private ArrayList<Vehicle> dataVehicle = new ArrayList();
    private SADoc oldDoc = new SADoc();

    /**
     * Creates new form DocumentsWindow
     *
     * @param token
     * @param parent
     */
    public OperWindow(String token, javax.swing.JFrame parent) {
        initComponents();
        this.token = token;

        beginWindow();
    }

    public OperWindow(String token, SADoc oldDoc, javax.swing.JFrame parent) {
        initComponents();
        this.token = token;
        this.oldDoc = oldDoc;

        beginWindow();
        showData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        ipExit = new javax.swing.JButton();
        ipModify = new javax.swing.JButton();
        ipInsert = new javax.swing.JButton();
        ipPrint = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        icKlient = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        icVidTrans = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        icTarifa = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ieNomer = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        iePrice = new unisoftbg.swing.JTextDoubleField();
        ieDateFrom = new com.github.lgooddatepicker.components.DatePicker();
        ieDateTo = new com.github.lgooddatepicker.components.DatePicker();

        setTitle("Гражданска Отговорност");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel5.setLayout(new java.awt.GridBagLayout());

        ipExit.setText("Изход");
        ipExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipExitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(ipExit, gridBagConstraints);

        ipModify.setText("Промяна");
        ipModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipModifyActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(ipModify, gridBagConstraints);

        ipInsert.setText("Запис");
        ipInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipInsertActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(ipInsert, gridBagConstraints);

        ipPrint.setForeground(new java.awt.Color(51, 51, 255));
        ipPrint.setText("Печат");
        ipPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipPrintActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(ipPrint, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jPanel5, gridBagConstraints);

        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setText("Клиент");
        jPanel7.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, 20));

        jPanel7.add(icKlient, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, 295, 20));

        jLabel7.setText("Автомобил");
        jPanel7.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 95, -1, 20));

        jPanel7.add(icVidTrans, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 95, 295, 20));

        jLabel8.setText("Тарифа");
        jLabel8.setToolTipText("");
        jPanel7.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, 20));

        jPanel7.add(icTarifa, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 120, 295, 20));

        jLabel1.setText("Номер");
        jPanel7.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 20));

        jLabel2.setText("Дата");
        jPanel7.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 35, -1, 20));
        jPanel7.add(ieNomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 175, -1));

        jLabel3.setText("Крайна цена");
        jPanel7.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 145, -1, 20));

        iePrice.setText("jTextDoubleField1");
        jPanel7.add(iePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 145, 80, -1));
        jPanel7.add(ieDateFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 35, -1, 25));
        jPanel7.add(ieDateTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 35, -1, 25));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ipExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipExitActionPerformed
        dispose();
    }//GEN-LAST:event_ipExitActionPerformed

    private void ipModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipModifyActionPerformed
        SADoc docToMod = getFromForm();

        try {
            updateDocument("http://localhost:8080/api/document/" + docToMod.ids, docToMod);

            JOptionPane.showMessageDialog(this, "Успешна промяна!");

            loadDoc();
            showData();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_ipModifyActionPerformed

    private void ipInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipInsertActionPerformed
        SADoc docToAdd = getFromForm();

        try {

            ObjectMapper objectMapper = new ObjectMapper();
            oldDoc = objectMapper.readValue(saveDocument("http://localhost:8080/api/document", docToAdd), SADoc.class);

            showData();
            ipModify.setVisible(true);
            ipPrint.setVisible(true);

        } catch (Exception ex) {
            Logger.getLogger(OperWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ipInsertActionPerformed

    private void ipPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipPrintActionPerformed
        try {
            // TODO add your handling code here:
            new com.assuranceclient.Print.Polica(token, oldDoc);
        } catch (IOException ex) {
            Logger.getLogger(OperWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ipPrintActionPerformed

    private boolean checkForChanges() {
        int resEqual = 0;
        if (resEqual != 0) {
            int result = JOptionPane.showConfirmDialog(this, "Имате незапазени промени! Искате ли да продължите?", "", JOptionPane.YES_NO_OPTION);
            return result != 0;
        }
        return false;
    }

    private SADoc getFromForm() {
        SADoc tmp = new SADoc();
        if (oldDoc_ids != 0) {
            tmp.ids = oldDoc_ids;
        }

        tmp.ids_client = dataCustomers.get(icKlient.getSelectedIndex()).ids;
        tmp.nomer = ieNomer.getText();
        tmp.date_from = java.sql.Date.valueOf(ieDateFrom.getDate());
        tmp.date_to = java.sql.Date.valueOf(ieDateTo.getDate());
        tmp.doc_price = iePrice.getValue();
        tmp.ids_price = dataTarifa.get(icTarifa.getSelectedIndex()).ids;
        tmp.ids_vehicle = dataVehicle.get(icVidTrans.getSelectedIndex()).ids;

        return tmp;
    }

    private void initCustomers() {

        try {
            jsonStringCustomers = fillCombo("http://localhost:8080/api/customers");
        } catch (Exception ex) {
            Logger.getLogger(CustomersWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        ObjectMapper objectMapper = new ObjectMapper();
        try {
            dataCustomers = objectMapper.readValue(jsonStringCustomers, new TypeReference<ArrayList<Customer>>() {
            });
        } catch (JsonProcessingException ex) {
            Logger.getLogger(CustomersWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        String[] names = new String[dataCustomers.size()];

        for (int i = 0; i < dataCustomers.size(); i++) {
            names[i] = dataCustomers.get(i).first_name + " " + dataCustomers.get(i).last_name;
        }

        DefaultComboBoxModel model = new DefaultComboBoxModel(names);
        icKlient.setModel(model);
    }

    private void initTarifas() {

        try {
            jsonStringTarifas = fillCombo("http://localhost:8080/api/prices");
        } catch (Exception ex) {
            Logger.getLogger(TarifiWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        ObjectMapper objectMapper = new ObjectMapper();
        try {
            dataTarifa = objectMapper.readValue(jsonStringTarifas, new TypeReference<ArrayList<Tarifa>>() {
            });
        } catch (JsonProcessingException ex) {
            Logger.getLogger(TarifiWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        String[] names = new String[dataCustomers.size()];

        for (int i = 0; i < dataTarifa.size(); i++) {
            names[i] = dataTarifa.get(i).mname;
        }

        DefaultComboBoxModel model = new DefaultComboBoxModel(names);
        icTarifa.setModel(model);
    }

    private void initVehicles() {

        try {
            jsonStringVehicles = fillCombo("http://localhost:8080/api/vehicles");
        } catch (Exception ex) {
            Logger.getLogger(VehicleWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        ObjectMapper objectMapper = new ObjectMapper();
        try {
            dataVehicle = objectMapper.readValue(jsonStringVehicles, new TypeReference<ArrayList<Vehicle>>() {
            });
        } catch (JsonProcessingException ex) {
            Logger.getLogger(VehicleWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        String[] names = new String[dataVehicle.size()];

        for (int i = 0; i < dataVehicle.size(); i++) {
            names[i] = dataVehicle.get(i).mname + " " + dataVehicle.get(i).reg_num;
        }

        DefaultComboBoxModel model = new DefaultComboBoxModel(names);
        icVidTrans.setModel(model);
    }

    private void loadDoc() {
        try {
            jsonStringDocuments = getDocumentByIds("http://localhost:8080/api/document" + oldDoc.ids);
        } catch (Exception ex) {
            Logger.getLogger(OperWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        ObjectMapper objectMapper = new ObjectMapper();
        try {
            oldDoc = objectMapper.readValue(jsonStringDocuments, new TypeReference<SADoc>() {
            });
        } catch (JsonProcessingException ex) {
            Logger.getLogger(OperWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void beginWindow() {
        initCustomers();
        initVehicles();
        initTarifas();

        if (oldDoc.ids == 0) {
            ipModify.setVisible(false);
            ipPrint.setVisible(false);
        }
    }

    private int getComboTarifaIndexFromIds(int ids) {
        for (int i = 0; i < dataTarifa.size(); i++) {
            if (dataTarifa.get(i).ids == ids) {
                return i;
            }
        }

        return -1;
    }

    private int getComboVidTransIndexFromIds(int ids) {
        for (int i = 0; i < dataVehicle.size(); i++) {
            if (dataVehicle.get(i).ids == ids) {
                return i;
            }
        }

        return -1;
    }

    private int getComboCustomersIndexFromIds(int ids) {
        for (int i = 0; i < dataCustomers.size(); i++) {
            if (dataCustomers.get(i).ids == ids) {
                return i;
            }
        }

        return -1;
    }

    private void showData() {
        ieNomer.setText(oldDoc.nomer);
        ieDateFrom.setDate(convertToLocalDateViaSqlDate(oldDoc.date_from));
        ieDateTo.setDate(convertToLocalDateViaSqlDate(oldDoc.date_to));
        icKlient.setSelectedIndex(getComboCustomersIndexFromIds(oldDoc.ids_client));
        icTarifa.setSelectedIndex(getComboTarifaIndexFromIds(oldDoc.ids_price));
        icVidTrans.setSelectedIndex(getComboVidTransIndexFromIds(oldDoc.ids_vehicle));
        iePrice.setValue(oldDoc.doc_price);
    }

    
    private LocalDate convertToLocalDateViaSqlDate(Date dateToConvert) {
        return new java.sql.Date(dateToConvert.getTime()).toLocalDate();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> icKlient;
    private javax.swing.JComboBox<String> icTarifa;
    private javax.swing.JComboBox<String> icVidTrans;
    private com.github.lgooddatepicker.components.DatePicker ieDateFrom;
    private com.github.lgooddatepicker.components.DatePicker ieDateTo;
    private javax.swing.JTextField ieNomer;
    private unisoftbg.swing.JTextDoubleField iePrice;
    private javax.swing.JButton ipExit;
    private javax.swing.JButton ipInsert;
    private javax.swing.JButton ipModify;
    private javax.swing.JButton ipPrint;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    // End of variables declaration//GEN-END:variables

    private String getDocumentByIds(String uri) throws Exception {
        HttpClient client = HttpClient.newHttpClient();

        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(uri))
                .header("Authorization", "Bearer " + token)
                .GET()
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        return response.body();
    }

    private String fillCombo(String uri) throws Exception {
        HttpClient client = HttpClient.newHttpClient();

        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(uri))
                .header("Authorization", "Bearer " + token)
                .GET()
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        return response.body();
    }

    private String saveDocument(String uri, SADoc doc) throws Exception {
        ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
        String json = ow.writeValueAsString(doc);

        HttpClient client = HttpClient.newHttpClient();

        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(uri))
                .header("Authorization", "Bearer " + token)
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(json))
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        return response.body();
    }

    private void updateDocument(String uri, SADoc document) throws Exception {
        ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
        String json = ow.writeValueAsString(document);

        HttpClient client = HttpClient.newHttpClient();

        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(uri))
                .header("Authorization", "Bearer " + token)
                .header("Content-Type", "application/json")
                .PUT(HttpRequest.BodyPublishers.ofString(json))
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        if (response.statusCode() == 500) {
            throw new Exception("Същетвува вече такова ЕГН!");
        }

        if (response.statusCode() > 400) {
            throw new Exception("Грешка при прямяна на данните!");
        }
    }
}
