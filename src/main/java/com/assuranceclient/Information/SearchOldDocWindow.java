/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.assuranceclient.Information;

import com.assuranceclient.dto.SADoc;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Цветан Иванов
 */
public class SearchOldDocWindow extends javax.swing.JInternalFrame {

    private String token = "";
    private String jsonStringDocuments = "";
    private ArrayList<SADoc> data = new ArrayList();
    private javax.swing.JFrame parent;

    /**
     * Creates new form DocumentsWindow
     *
     * @param token
     * @param parent
     */
    public SearchOldDocWindow(String token, javax.swing.JFrame parent) {
        initComponents();
        this.token = token;
        this.parent = parent;
        beginWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        ipRefresh = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        itTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        ipExit = new javax.swing.JButton();
        ipDel = new javax.swing.JButton();
        ipNew = new javax.swing.JButton();
        ipInsert = new javax.swing.JButton();

        setTitle("Документи търсене");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        ipRefresh.setText("Обновяване");
        ipRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipRefreshActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(ipRefresh, gridBagConstraints);

        itTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        itTable.setGridColor(new java.awt.Color(204, 204, 204));
        itTable.setName(""); // NOI18N
        jScrollPane2.setViewportView(itTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jScrollPane2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        ipExit.setText("Изход");
        ipExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipExitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(ipExit, gridBagConstraints);

        ipDel.setForeground(new java.awt.Color(255, 0, 0));
        ipDel.setText("Изтриване");
        ipDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipDelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 30, 2, 2);
        jPanel3.add(ipDel, gridBagConstraints);

        ipNew.setText("Нов");
        ipNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipNewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(ipNew, gridBagConstraints);

        ipInsert.setText("Преглед");
        ipInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipInsertActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(ipInsert, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ipRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipRefreshActionPerformed
        initDocuments();

        showTable();
    }//GEN-LAST:event_ipRefreshActionPerformed

    private void ipExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipExitActionPerformed
        dispose();
    }//GEN-LAST:event_ipExitActionPerformed

    private void ipDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipDelActionPerformed
        try {
            deleteDocument("http://localhost:8080/api/document/" + data.get(itTable.getSelectedRow()).doc_ids);

            ipRefreshActionPerformed(null);
        } catch (Exception ex) {
            Logger.getLogger(SearchOldDocWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_ipDelActionPerformed

    private void ipNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipNewActionPerformed
        com.assuranceclient.Oper.OperWindow ss = new com.assuranceclient.Oper.OperWindow(token, 0, parent);
        ss.setVisible(true);
        parent.add(ss);
    }//GEN-LAST:event_ipNewActionPerformed

    private void ipInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipInsertActionPerformed

        com.assuranceclient.Oper.OperWindow ss = new com.assuranceclient.Oper.OperWindow(token, data.get(itTable.getSelectedRow()).doc_ids, parent);
        ss.setVisible(true);
        parent.add(ss);
    }//GEN-LAST:event_ipInsertActionPerformed

    private void showTable() {
        Vector cols[] = new Vector[colsNames.length];
        for (int i = 0; i < cols.length; i++) {
            cols[i] = new Vector();
        }

        for (int i = 0; i < data.size(); i++) {
            int j = 0;
            cols[j++].add(data.get(i).doc_nomer);
            cols[j++].add(data.get(i).date);
            cols[j++].add(data.get(i).cli_mname);
            cols[j++].add(data.get(i).price);
        }
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        model.setRowCount(cols[0].size());
        for (int i = 0; i < cols.length; i++) {
            model.addColumn(colsNames[i], cols[i]);
        }

        itTable.setModel(model);
        model.fireTableDataChanged();
        itTable.setSelectionMode(0);
    }

    private void initDocuments() {

        try {
            jsonStringDocuments = getDocuments("http://localhost:8080/api/documents");
        } catch (Exception ex) {
            Logger.getLogger(SearchOldDocWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        ObjectMapper objectMapper = new ObjectMapper();
        try {
            data = objectMapper.readValue(jsonStringDocuments, new TypeReference<ArrayList<SADoc>>() {
            });
        } catch (JsonProcessingException ex) {
            Logger.getLogger(SearchOldDocWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void beginWindow() {

        showTable();
    }

    private final String colsNames[]
            = {
                "Док. номер",
                "Дата",
                "Клиент",
                "Цена",};

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ipDel;
    private javax.swing.JButton ipExit;
    private javax.swing.JButton ipInsert;
    private javax.swing.JButton ipNew;
    private javax.swing.JButton ipRefresh;
    private javax.swing.JTable itTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private String getDocuments(String uri) throws Exception {
        HttpClient client = HttpClient.newHttpClient();

        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(uri))
                .header("Authorization", "Bearer " + token)
                .GET()
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        return response.body();
    }

    private String deleteDocument(String uri) throws Exception {
        HttpClient client = HttpClient.newHttpClient();

        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(uri))
                .header("Authorization", "Bearer " + token)
                .DELETE()
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        return response.body();
    }
}
