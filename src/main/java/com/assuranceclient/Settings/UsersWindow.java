/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.assuranceclient.Settings;

import com.assuranceclient.dto.User;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import unisoftbg.swing.MainWindow;

/**
 *
 * @author Цветан Иванов
 */
public class UsersWindow extends javax.swing.JInternalFrame {

    private boolean flagStopListSelectionListener = false;
    private boolean flagStopCheckForChanges = false;
    private String token = "";
    private String jsonStringUsers = "";
    private ArrayList<User> data = new ArrayList();
    private User currentItem = new User();

    /**
     * Creates new form UsersWindow
     *
     * @param token
     * @param parent
     */
    public UsersWindow(String token, javax.swing.JFrame parent) {
        initComponents();
        this.token = token;
        beginWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        itTable = new javax.swing.JTable();
        ipRefresh = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        ipExit = new javax.swing.JButton();
        ipDel = new javax.swing.JButton();
        ipModify = new javax.swing.JButton();
        ipNew = new javax.swing.JButton();
        ipInsert = new javax.swing.JButton();
        jPane6 = new javax.swing.JPanel();
        ieMname = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        iePassword = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        icRole = new javax.swing.JComboBox<>();

        setTitle("Потребители");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.GridBagLayout());

        itTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        itTable.setGridColor(new java.awt.Color(204, 204, 204));
        itTable.setName(""); // NOI18N
        jScrollPane2.setViewportView(itTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel2.add(jScrollPane2, gridBagConstraints);

        ipRefresh.setText("Обновяване");
        ipRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipRefreshActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel2.add(ipRefresh, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel2.setBackground(new java.awt.Color(255, 204, 102));
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Потребители");
        jLabel2.setToolTipText("");
        jLabel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setMaximumSize(new java.awt.Dimension(80, 5));
        jLabel2.setMinimumSize(new java.awt.Dimension(80, 5));
        jLabel2.setOpaque(true);
        jLabel2.setPreferredSize(new java.awt.Dimension(80, 5));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 450;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jPanel4, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        ipExit.setText("Изход");
        ipExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipExitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(ipExit, gridBagConstraints);

        ipDel.setForeground(new java.awt.Color(255, 0, 0));
        ipDel.setText("Изтриване");
        ipDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipDelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 30, 2, 2);
        jPanel5.add(ipDel, gridBagConstraints);

        ipModify.setText("Промяна");
        ipModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipModifyActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(ipModify, gridBagConstraints);

        ipNew.setText("Нов");
        ipNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipNewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(ipNew, gridBagConstraints);

        ipInsert.setText("Запис");
        ipInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipInsertActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel5.add(ipInsert, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jPanel5, gridBagConstraints);

        jPane6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPane6.add(ieMname, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 144, 20));

        jLabel1.setText("Потребителско име");
        jPane6.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, -1, 20));

        jLabel3.setText("Парола");
        jPane6.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 35, -1, 20));
        jPane6.add(iePassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 35, 145, -1));

        jLabel4.setText("Роля");
        jPane6.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, 20));

        jPane6.add(icRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 145, 20));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(jPane6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ipInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipInsertActionPerformed
        getFromForm(currentItem);

        try {
            saveUser("http://localhost:8080/api/users", currentItem);

            ipRefreshActionPerformed(null);
        } catch (Exception ex) {
            Logger.getLogger(UsersWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_ipInsertActionPerformed

    private void ipRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipRefreshActionPerformed
        initUsers();

        currentItem = new User();
        flagStopListSelectionListener = true;
        ((DefaultTableModel) itTable.getModel()).fireTableDataChanged();
        flagStopListSelectionListener = false;

        showTable();
    }//GEN-LAST:event_ipRefreshActionPerformed

    private void ipExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipExitActionPerformed
        dispose();
    }//GEN-LAST:event_ipExitActionPerformed

    private void ipModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipModifyActionPerformed
        getFromForm(currentItem);

        try {
            updateUser("http://localhost:8080/api/users/" + currentItem.ids, currentItem);

            JOptionPane.showMessageDialog(this, "Успешна промяна!");

            ipRefreshActionPerformed(null);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_ipModifyActionPerformed

    private void ipDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipDelActionPerformed
        try {
            deleteUser("http://localhost:8080/api/users/" + currentItem.ids);

            ipRefreshActionPerformed(null);
        } catch (Exception ex) {
            Logger.getLogger(UsersWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_ipDelActionPerformed

    private void ipNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipNewActionPerformed
        if (flagStopCheckForChanges == false && checkForChanges()) {
            return;
        }

        currentItem = new User();
        flagStopListSelectionListener = true;
        ((DefaultTableModel) itTable.getModel()).fireTableDataChanged();
        flagStopListSelectionListener = false;
        showData();
    }//GEN-LAST:event_ipNewActionPerformed

    private void showTable() {
        Vector cols[] = new Vector[colsNames.length];
        for (int i = 0; i < cols.length; i++) {
            cols[i] = new Vector();
        }

        for (int i = 0; i < data.size(); i++) {
            int j = 0;
            cols[j++].add(data.get(i).username);
            cols[j++].add(USER_ROLES[data.get(i).user_role]);
        }
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        model.setRowCount(cols[0].size());
        for (int i = 0; i < cols.length; i++) {
            model.addColumn(colsNames[i], cols[i]);
        }

        flagStopCheckForChanges = true;
        flagStopListSelectionListener = true;
        itTable.setModel(model);
        model.fireTableDataChanged();
        itTable.setSelectionMode(0);
        ipNewActionPerformed(null);
    }

    private boolean checkForChanges() {
        int resEqual = 0;
        if (resEqual != 0) {
            int result = JOptionPane.showConfirmDialog(this, "Имате незапазени промени! Искате ли да продължите?", "", JOptionPane.YES_NO_OPTION);
            return result != 0;
        }
        return false;
    }

    private void getFromForm(User tmp) {
        tmp.username = ieMname.getText().trim();
        tmp.user_password = iePassword.getText();
        tmp.user_role = icRole.getSelectedIndex();
    }

    private void initUsers() {

        try {
            jsonStringUsers = getUsers("http://localhost:8080/api/users");
        } catch (Exception ex) {
            Logger.getLogger(UsersWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        ObjectMapper objectMapper = new ObjectMapper();
        try {
            data = objectMapper.readValue(jsonStringUsers, new TypeReference<ArrayList<User>>() {
            });
        } catch (JsonProcessingException ex) {
            Logger.getLogger(UsersWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initRolesCombo() {
        DefaultComboBoxModel model = new DefaultComboBoxModel(USER_ROLES);
        icRole.setModel(model);
    }

    public void beginWindow() {
        initUsers();
        initRolesCombo();

        ListSelectionModel lsm = itTable.getSelectionModel();
        lsm.addListSelectionListener((javax.swing.event.ListSelectionEvent e) -> {
            if (flagStopListSelectionListener) {
                return;
            }

            if (e.getValueIsAdjusting() == false) {
                if (checkForChanges()) {
                    int index = -1;
                    for (int i = 0; i < data.size(); i++) {
                        if (currentItem.ids == data.get(i).ids) {
                            index = i;
                            break;
                        }
                    }

                    if (index == -1) {
                        return;
                    }

                    flagStopListSelectionListener = true;
                    itTable.setRowSelectionInterval(index, index);
                    currentItem = data.get(index);
                    flagStopListSelectionListener = false;
                    return;
                }

                int row = itTable.getSelectedRow();
                if (row == -1) {
                    currentItem = new User();
                } else {
                    currentItem = data.get(row);
                }

                showData();
            }
        });

        showTable();
    }

    private void showData() {
        ieMname.setText(currentItem.username);
        icRole.setSelectedIndex(currentItem.user_role);
    }

    private final String colsNames[]
            = {
                "Потребителско име",
                "Роля",
            };

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> icRole;
    private javax.swing.JTextField ieMname;
    private javax.swing.JPasswordField iePassword;
    private javax.swing.JButton ipDel;
    private javax.swing.JButton ipExit;
    private javax.swing.JButton ipInsert;
    private javax.swing.JButton ipModify;
    private javax.swing.JButton ipNew;
    private javax.swing.JButton ipRefresh;
    private javax.swing.JTable itTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPane6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private String getUsers(String uri) throws Exception {
        HttpClient client = HttpClient.newHttpClient();

        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(uri))
                .header("Authorization", "Bearer " + token)
                .GET()
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        return response.body();
    }

    private String saveUser(String uri, User user) throws Exception {
        ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
        String json = ow.writeValueAsString(user);

        HttpClient client = HttpClient.newHttpClient();

        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(uri))
                .header("Authorization", "Bearer " + token)
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(json))
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        return response.body();
    }

    private void updateUser(String uri, User user) throws Exception {
        ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
        String json = ow.writeValueAsString(user);

        HttpClient client = HttpClient.newHttpClient();

        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(uri))
                .header("Authorization", "Bearer " + token)
                .header("Content-Type", "application/json")
                .PUT(HttpRequest.BodyPublishers.ofString(json))
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        if (response.statusCode() == 500) {
            throw new Exception("Същетвува вече такова ЕГН!");
        }

        if (response.statusCode() > 400) {
            throw new Exception("Грешка при прямяна на данните!");
        }
    }

    private String deleteUser(String uri) throws Exception {
        HttpClient client = HttpClient.newHttpClient();

        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(uri))
                .header("Authorization", "Bearer " + token)
                .DELETE()
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        return response.body();
    }

    private String[] USER_ROLES
            = {
                "",
                "Администратор",
                "Служител",
                "Стажант",
            };
}
