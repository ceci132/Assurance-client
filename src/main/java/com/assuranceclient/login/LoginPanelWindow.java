/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.assuranceclient.login;

import com.assuranceclient.Settings.UsersWindow;
import com.assuranceclient.dto.User;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpResponse;
import java.net.http.HttpRequest;
import java.util.ArrayList;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Цветан Иванов
 */
public class LoginPanelWindow extends javax.swing.JFrame {

    private String jsonStringUsers = "";
    private ArrayList<User> dataUsers = new ArrayList();
    /**
     * Creates new form loginPanelWindow
     */
    public LoginPanelWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ieUserName = new javax.swing.JTextField();
        ipEnter = new javax.swing.JButton();
        ipExit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        ieUserPassword = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login Panel");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Потребител");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 0, 5);
        jPanel1.add(jLabel1, gridBagConstraints);

        ieUserName.setMaximumSize(new java.awt.Dimension(200, 25));
        ieUserName.setMinimumSize(new java.awt.Dimension(200, 25));
        ieUserName.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        jPanel1.add(ieUserName, gridBagConstraints);

        ipEnter.setText("Вход");
        ipEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipEnterActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 30, 0, 0);
        jPanel1.add(ipEnter, gridBagConstraints);

        ipExit.setText("Изход");
        ipExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipExitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(ipExit, gridBagConstraints);

        jLabel2.setText("Парола");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        ieUserPassword.setMaximumSize(new java.awt.Dimension(200, 25));
        ieUserPassword.setMinimumSize(new java.awt.Dimension(200, 25));
        ieUserPassword.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(ieUserPassword, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ipExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipExitActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_ipExitActionPerformed

    private void ipEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipEnterActionPerformed

        try {
            token = get("http://localhost:8080/token");

            initUsers();
            
            if (!token.equals("")) {
                com.assuranceclient.mainwindow.MainWindow ss = new com.assuranceclient.mainwindow.MainWindow(token, this);
                ss.setUserRole(getUserRoleByUserName(ieUserName.getText()));
                ss.setVisible(true);
                
                dispose();
            } 

        } catch (Exception ex) {
            Logger.getLogger(LoginPanelWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_ipEnterActionPerformed

    public String get(String uri) throws Exception {
        String credentials = ieUserName.getText() + ":" + ieUserPassword.getText();
        String headerValue = "Basic " + Base64.getEncoder()
                .encodeToString(credentials.getBytes());

        HttpClient client = HttpClient.newHttpClient();

        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(uri))
                .header("Authorization", headerValue)
                .POST(HttpRequest.BodyPublishers.noBody())
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        return response.body();
    }

    private String token = "";
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ieUserName;
    private javax.swing.JPasswordField ieUserPassword;
    private javax.swing.JButton ipEnter;
    private javax.swing.JButton ipExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private int getUserRoleByUserName(String user_name){
        for (int i = 0; i < dataUsers.size(); i++) {
            if (dataUsers.get(i).username.equals(user_name)) {
                return dataUsers.get(i).user_role;
            }
        }
        return -1;
    }
    private void initUsers() {

        try {
            jsonStringUsers = getUsers("http://localhost:8080/api/users");
        } catch (Exception ex) {
            Logger.getLogger(UsersWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        ObjectMapper objectMapper = new ObjectMapper();
        try {
            dataUsers = objectMapper.readValue(jsonStringUsers, new TypeReference<ArrayList<User>>() {
            });
        } catch (JsonProcessingException ex) {
            Logger.getLogger(UsersWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String getUsers(String uri) throws Exception {
        HttpClient client = HttpClient.newHttpClient();

        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(uri))
                .header("Authorization", "Bearer " + token)
                .GET()
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        return response.body();
    }

    
}
